#!/usr/bin/env python3
"""
üöÄ OpenCV CUDA Setup - Instalaci√≥n Automatizada
===============================================

Script automatizado para instalar OpenCV con soporte CUDA
basado en documentaci√≥n oficial:
https://opencv.org/platforms/cuda/

M√©todos implementados:
1. Conda-forge (recomendado)
2. pip precompilado (experimentales)
3. Compilaci√≥n desde c√≥digo (avanzado)
"""

import sys
import subprocess
import os
import platform
import shutil
from pathlib import Path
import urllib.request
import zipfile
import tempfile

def check_system_requirements():
    """Verifica requisitos del sistema"""
    print("üîç VERIFICANDO REQUISITOS DEL SISTEMA")
    print("=" * 50)
    
    # Python version
    python_version = sys.version_info
    print(f"‚úÖ Python: {python_version.major}.{python_version.minor}")
    
    # Operating System
    system = platform.system()
    print(f"‚úÖ OS: {system} {platform.release()}")
    
    # CUDA disponible
    try:
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ NVIDIA GPU detectada")
            # Extraer versi√≥n CUDA
            lines = result.stdout.split('\n')
            for line in lines:
                if 'CUDA Version:' in line:
                    cuda_version = line.split('CUDA Version:')[1].strip()
                    print(f"‚úÖ CUDA Driver: {cuda_version}")
                    break
        else:
            print("‚ùå NVIDIA GPU no detectada")
            return False
    except FileNotFoundError:
        print("‚ùå nvidia-smi no encontrado - No hay GPU NVIDIA")
        return False
    
    # Conda disponible
    conda_available = shutil.which('conda') is not None
    print(f"{'‚úÖ' if conda_available else '‚ö†Ô∏è'} Conda: {'Disponible' if conda_available else 'No disponible'}")
    
    # Pip disponible
    pip_available = shutil.which('pip') is not None
    print(f"‚úÖ Pip: {'Disponible' if pip_available else 'No disponible'}")
    
    print()
    return True

def backup_current_opencv():
    """Respalda la instalaci√≥n actual de OpenCV"""
    print("üíæ RESPALDANDO OPENCV ACTUAL")
    print("=" * 50)
    
    try:
        import cv2
        current_version = cv2.__version__
        print(f"üì¶ OpenCV actual: {current_version}")
        
        # Crear informaci√≥n de respaldo
        backup_info = {
            'version': current_version,
            'path': cv2.__file__,
            'cuda_support': hasattr(cv2, 'cuda'),
            'cuda_devices': cv2.cuda.getCudaEnabledDeviceCount() if hasattr(cv2, 'cuda') else 0
        }
        
        print(f"üìç Ubicaci√≥n: {backup_info['path']}")
        print(f"üñ•Ô∏è CUDA: {'‚úÖ' if backup_info['cuda_support'] else '‚ùå'}")
        
        # Guardar info para rollback
        with open('opencv_backup_info.txt', 'w') as f:
            for key, value in backup_info.items():
                f.write(f"{key}: {value}\n")
        
        print("‚úÖ Informaci√≥n de respaldo guardada en opencv_backup_info.txt")
        
    except ImportError:
        print("‚ö†Ô∏è OpenCV no instalado actualmente")
    
    print()

def install_opencv_conda():
    """Instala OpenCV con CUDA usando conda-forge"""
    print("üêç INSTALANDO OPENCV CON CONDA-FORGE")
    print("=" * 50)
    
    if not shutil.which('conda'):
        print("‚ùå Conda no est√° disponible")
        return False
    
    try:
        # Desinstalar versiones actuales
        print("üóëÔ∏è Desinstalando OpenCV actual...")
        subprocess.run(['pip', 'uninstall', 'opencv-python', 'opencv-contrib-python', '-y'], 
                      capture_output=True)
        
        # Instalar desde conda-forge
        print("üì¶ Instalando OpenCV desde conda-forge...")
        cmd = ['conda', 'install', '-c', 'conda-forge', 'opencv', '-y']
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ OpenCV instalado desde conda-forge")
            return True
        else:
            print(f"‚ùå Error instalando desde conda-forge: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante instalaci√≥n conda: {e}")
        return False

def install_opencv_pip_precompiled():
    """Instala OpenCV precompilado con CUDA (experimental)"""
    print("üì¶ INSTALANDO OPENCV PRECOMPILADO CON CUDA")
    print("=" * 50)
    
    print("‚ö†Ô∏è ADVERTENCIA: Esta es una versi√≥n experimental")
    print("   Puede no funcionar en todos los sistemas")
    print()
    
    try:
        # Desinstalar versi√≥n actual
        print("üóëÔ∏è Desinstalando OpenCV actual...")
        subprocess.run(['pip', 'uninstall', 'opencv-python', 'opencv-contrib-python', '-y'],
                      capture_output=True)
        
        # URLs de versiones precompiladas con CUDA (experimentales)
        cuda_wheels = {
            'windows': [
                'https://github.com/opencv/opencv-python/releases/download/4.8.1.78/opencv_contrib_python-4.8.1.78-cp39-cp39-win_amd64.whl',
                'opencv-contrib-python==4.8.1.78'
            ]
        }
        
        system = platform.system().lower()
        if 'windows' in system:
            print("ü™ü Instalando versi√≥n para Windows...")
            cmd = ['pip', 'install', 'opencv-contrib-python==4.8.1.78']
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ OpenCV precompilado instalado")
                return True
            else:
                print(f"‚ùå Error: {result.stderr}")
                return False
        else:
            print("‚ùå Versi√≥n precompilada no disponible para este sistema")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante instalaci√≥n: {e}")
        return False

def verify_cuda_installation():
    """Verifica que CUDA funcione correctamente"""
    print("üîç VERIFICANDO INSTALACI√ìN CUDA")
    print("=" * 50)
    
    try:
        # Reimportar OpenCV
        import importlib
        if 'cv2' in sys.modules:
            importlib.reload(sys.modules['cv2'])
        
        import cv2
        
        print(f"üì¶ OpenCV Version: {cv2.__version__}")
        print(f"üñ•Ô∏è M√≥dulo CUDA: {'‚úÖ' if hasattr(cv2, 'cuda') else '‚ùå'}")
        
        if hasattr(cv2, 'cuda'):
            device_count = cv2.cuda.getCudaEnabledDeviceCount()
            print(f"üéÆ CUDA Devices: {device_count}")
            
            if device_count > 0:
                print("‚úÖ ¬°CUDA FUNCIONANDO CORRECTAMENTE!")
                
                # Informaci√≥n detallada del dispositivo
                try:
                    device_info = cv2.cuda.DeviceInfo(0)
                    print(f"   üìç Device: {device_info.name()}")
                    print(f"   üíæ Memory: {device_info.totalGlobalMem() / (1024**3):.1f} GB")
                    print(f"   üî¢ Compute: {device_info.majorVersion()}.{device_info.minorVersion()}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Info detallada no disponible: {e}")
                
                return True
            else:
                print("‚ùå CUDA m√≥dulo presente pero sin dispositivos")
                return False
        else:
            print("‚ùå M√≥dulo CUDA no disponible")
            return False
            
    except ImportError as e:
        print(f"‚ùå Error importando OpenCV: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error verificando CUDA: {e}")
        return False

def rollback_opencv():
    """Restaura OpenCV anterior si hay problemas"""
    print("üîÑ RESTAURANDO OPENCV ANTERIOR")
    print("=" * 50)
    
    if not os.path.exists('opencv_backup_info.txt'):
        print("‚ùå No se encontr√≥ informaci√≥n de respaldo")
        return False
    
    try:
        # Desinstalar versi√≥n problem√°tica
        subprocess.run(['pip', 'uninstall', 'opencv-python', 'opencv-contrib-python', '-y'],
                      capture_output=True)
        
        # Reinstalar versi√≥n estable
        cmd = ['pip', 'install', 'opencv-python==4.11.0']
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ OpenCV restaurado a versi√≥n estable")
            return True
        else:
            print(f"‚ùå Error restaurando: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante rollback: {e}")
        return False

def run_performance_test():
    """Ejecuta test de rendimiento CUDA"""
    print("üöÄ EJECUTANDO TEST DE RENDIMIENTO")
    print("=" * 50)
    
    try:
        # Ejecutar test CUDA experimental
        result = subprocess.run(['python', 'run_cuda_experimental_test.py'], 
                              input='10\n\n', text=True, capture_output=True)
        
        if result.returncode == 0:
            print("‚úÖ Test completado exitosamente")
            # Extraer m√©tricas clave del output
            lines = result.stdout.split('\n')
            for line in lines:
                if 'GPU speedup:' in line or 'FPS promedio:' in line or 'CUDA disponible:' in line:
                    print(f"   {line.strip()}")
        else:
            print(f"‚ö†Ô∏è Test completado con advertencias: {result.stderr}")
        
    except Exception as e:
        print(f"‚ùå Error ejecutando test: {e}")

def main():
    """Funci√≥n principal del setup"""
    print("üöÄ OPENCV CUDA SETUP")
    print("=" * 50)
    print("üìñ Basado en: https://opencv.org/platforms/cuda/")
    print()
    
    # Verificar requisitos
    if not check_system_requirements():
        print("‚ùå Requisitos del sistema no cumplidos")
        return
    
    # Respaldar instalaci√≥n actual
    backup_current_opencv()
    
    # Mostrar opciones
    print("üõ†Ô∏è OPCIONES DE INSTALACI√ìN:")
    print("1. üêç Conda-forge (Recomendado)")
    print("2. üì¶ Pip precompilado (Experimental)")
    print("3. üîÑ Rollback a versi√≥n estable")
    print("4. üöÄ Solo test de rendimiento")
    print("5. ‚ùå Salir")
    print()
    
    while True:
        try:
            choice = input("Selecciona una opci√≥n (1-5): ").strip()
            
            if choice == '1':
                success = install_opencv_conda()
                break
            elif choice == '2':
                success = install_opencv_pip_precompiled()
                break
            elif choice == '3':
                success = rollback_opencv()
                break
            elif choice == '4':
                run_performance_test()
                return
            elif choice == '5':
                print("üëã Saliendo...")
                return
            else:
                print("‚ùå Opci√≥n inv√°lida")
                continue
                
        except KeyboardInterrupt:
            print("\nüëã Proceso cancelado")
            return
    
    if choice in ['1', '2']:
        print("\n" + "=" * 50)
        
        if success:
            # Verificar instalaci√≥n
            if verify_cuda_installation():
                print("\nüéâ ¬°INSTALACI√ìN EXITOSA!")
                print("üí° Ahora puedes usar CUDA en el detector")
                
                # Preguntar si ejecutar test
                test_now = input("\n¬øEjecutar test de rendimiento ahora? (s/N): ").lower()
                if test_now == 's':
                    run_performance_test()
            else:
                print("\n‚ùå Instalaci√≥n fall√≥ - ejecutando rollback...")
                rollback_opencv()
        else:
            print("\n‚ùå Instalaci√≥n fall√≥")
            rollback_choice = input("¬øEjecutar rollback autom√°tico? (s/N): ").lower()
            if rollback_choice == 's':
                rollback_opencv()

if __name__ == "__main__":
    main() 